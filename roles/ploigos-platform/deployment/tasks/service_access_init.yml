- name: Initialize access dictionary external services into a single dictionary
  set_fact:
    all_services_details: >-
      {{ ploigos_platform.services.values() | list |
      json_query('[?(' + ( all_services | join('||') ) + ').enabled
      && *.external_properties].{key:keys(@)[0], value:values(@)[0].external_properties}') | items2dict }}

- name: Initialize managed RHSSO details
  when: '"rhsso" in managed_services'
  set_fact:
    all_services_details: "{{ all_services_details | combine(_rhsso_details) }}"
  vars:
    _rhsso_details:
      rhsso: {}

- name: Initialize managed Gitea details
  when: '"gitea" in managed_services'
  block:
    - k8s_info:
        kind: Secret
        api_version: v1
        namespace: '{{ ploigos_namespace }}'
        name: gitea-admin-credentials
      register: gitea_secret_result
      until: gitea_secret_result.resources
      retries: 30
      delay: 10

    - name: Set Gitea service details
      set_fact:
        all_services_details: "{{ all_services_details | combine(_gitea_details) }}"
      vars:
        _gitea_details:
          gitea:
            url: "http://gitea:3000"
            username: "{{ gitea_secret_result.resources[0].data.username | b64decode }}"
            password: "{{ gitea_secret_result.resources[0].data.password | b64decode }}"

- name: Initialize managed GitLab details
  when: '"gitlab" in managed_services'
  block:
    - name: Create GitLab token
      set_fact:
        gitlab_root_token: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"

    - name: Set api creation command
      set_fact:
        gitlab_console_command: >-
          "token = User.find_by_username('root').personal_access_tokens.create(scopes: [:api, :read_api, :sudo, :read_user],name: 'Automation token');
          token.set_token('{{ gitlab_root_token }}'); token.save!"

    - name: Create access token for GitLab root user
      shell: |
        oc='{{ oc_cli }}'
        set -eo pipefail
        pod=$($oc get pods -n gitlab-system -l app=task-runner -o jsonpath='{.items[0].metadata.name}')
        output=$($oc exec $pod -n gitlab-system -c task-runner -- gitlab-rails runner {{ gitlab_console_command }} 2>&1)
        if [ ! -z "$output" ]; then
          if echo "$output" | grep -q 'already exist'; then
              echo ok
          else
              echo failed
          fi
        else
          echo changed
        fi
        echo $output
      register: gitlab_token
      args:
        executable: /bin/bash
      failed_when: '"failed" in gitlab_token.stdout_lines'
      changed_when: '"changed" in gitlab_token.stdout_lines'

    - name: Set GitLab service details
      set_fact:
        all_services_details: "{{ all_services_details | combine(_gitlab_details) }}"
      vars:
        _gitlab_details:
          gitlab:
            url: "https://gitlab.apps.{{ full_cluster_name }}"
            api-token: "{{ gitlab_root_token }}"

- name: Initialize managed Jenkins details
  when: '"jenkins" in managed_services'
  set_fact:
    all_services_details: "{{ all_services_details | combine(_jenkins_details) }}"
  vars:
    _jenkins_details:
      jenkins:
        url: 'https://jenkins-{{ ploigos_namespace }}.apps.{{ full_cluster_name }}'
        token: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/token') }}"

- name: Initialize managed Tekton details
  when: '"tekton" in managed_services'
  set_fact:
    all_services_details: "{{ all_services_details | combine(_tekton_details) }}"
  vars:
    _tekton_details:
      tekton: {}

- name: Initialize managed Nexus details (Artifact Repository)
  when: '"nexus_artifacts" in managed_services'
  set_fact:
    all_services_details: "{{ all_services_details | combine(_nexus_artifacts_details) }}"
  vars:
    _nexus_artifacts_details:
      nexus_artifacts:
        url: "http://nexus-sonatype-nexus-service.{{ ploigos_namespace }}.svc.cluster.local:8081"
        username: admin
        password: admin123

- name: Initialize managed Nexus details (Container Registry)
  when: '"nexus_containers" in managed_services'
  set_fact:
    all_services_details: "{{ all_services_details | combine(_nexus_containers_details) }}"
  vars:
    _nexus_containers_details:
      nexus_containers:
        server_url: "http://nexus-sonatype-nexus-service.{{ ploigos_namespace }}.svc.cluster.local:8081"
        docker_url: "nexus-docker-{{ ploigos_namespace }}.apps.{{ full_cluster_name }}"
        username: admin
        password: admin123

- name: Initialize managed Sonarqube details
  when: '"sonarqube" in managed_services'
  set_fact:
    all_services_details: "{{ all_services_details | combine(_sonarqube_details) }}"
  vars:
    _sonarqube_details:
      sonarqube:
        url: "http://sonarqube:9000"
        username: admin
        password: admin

- name: Initialize managed Quay details
  when: '"quay" in managed_services'
  set_fact:
    all_services_details: "{{ all_services_details | combine(_quay_details) }}"
  vars:
    _quay_details:
      quay:
        url: "quay-{{ ploigos_namespace }}.apps.{{ full_cluster_name }}"
        username: quay
        password: password

- name: Initialize managed ArgoCD details
  when: '"argocd" in managed_services'
  set_fact:
    all_services_details: "{{ all_services_details | combine(_argocd_details) }}"
  vars:
    _argocd_details:
      argocd:
        kubernetes_api: https://kubernetes.default.svc.cluster.local:443
        kubernetes_token: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/token') }}"
        kubernetes_cr_name: argocd
        kubernetes_namespace: "{{ ploigos_namespace }}"

- name: Initialize managed Selenium Grid details
  when: '"selenium" in managed_services'
  set_fact:
    all_services_details: "{{ all_services_details | combine(_selenium_details) }}"
  vars:
    _selenium_details:
      selenium:
        url: "http://selenium-grid.{{ ploigos_namespace }}.svc.cluster.local:4444"
